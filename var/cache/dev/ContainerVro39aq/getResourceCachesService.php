<?php

namespace ContainerVro39aq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getResourceCachesService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'SpomkyLabs\PwaBundle\CachingStrategy\ResourceCaches' shared autowired service.
     *
     * @return \SpomkyLabs\PwaBundle\CachingStrategy\ResourceCaches
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/spomky-labs/pwa-bundle/src/CachingStrategy/HasCacheStrategiesInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/spomky-labs/pwa-bundle/src/CachingStrategy/ResourceCaches.php';
        include_once \dirname(__DIR__, 4).'/vendor/spomky-labs/pwa-bundle/src/CachingStrategy/PreloadUrlsGeneratorManager.php';

        return $container->privates['SpomkyLabs\\PwaBundle\\CachingStrategy\\ResourceCaches'] = new \SpomkyLabs\PwaBundle\CachingStrategy\ResourceCaches(new \SpomkyLabs\PwaBundle\CachingStrategy\PreloadUrlsGeneratorManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['App\\PreloadGenerator\\StaticPagesUrlPreloadGenerator'] ??= new \App\PreloadGenerator\StaticPagesUrlPreloadGenerator($container->parameters['app.supported_locales']));
            yield 1 => ($container->privates['spomky_labs_pwa.preload_urls_tag_generator.pages'] ?? $container->load('getSpomkyLabsPwa_PreloadUrlsTagGenerator_PagesService'));
        }, 2)), ($container->privates['SpomkyLabs\\PwaBundle\\Dto\\ServiceWorker'] ?? self::getServiceWorkerService($container)), ($container->privates['debug.serializer'] ?? self::getDebug_SerializerService($container)), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\DestinationMatchCallbackHandler'] ??= new \SpomkyLabs\PwaBundle\MatchCallbackHandler\DestinationMatchCallbackHandler());
            yield 1 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\ExactPathnameMatchCallbackHandler'] ??= new \SpomkyLabs\PwaBundle\MatchCallbackHandler\ExactPathnameMatchCallbackHandler());
            yield 2 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\NavigationMatchCallbackHandler'] ??= new \SpomkyLabs\PwaBundle\MatchCallbackHandler\NavigationMatchCallbackHandler());
            yield 3 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\OriginMatchCallbackHandler'] ??= new \SpomkyLabs\PwaBundle\MatchCallbackHandler\OriginMatchCallbackHandler());
            yield 4 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\PathnameEndsWithMatchCallbackHandler'] ??= new \SpomkyLabs\PwaBundle\MatchCallbackHandler\PathnameEndsWithMatchCallbackHandler());
            yield 5 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\PathnameStartsWithMatchCallbackHandler'] ??= new \SpomkyLabs\PwaBundle\MatchCallbackHandler\PathnameStartsWithMatchCallbackHandler());
            yield 6 => ($container->privates['SpomkyLabs\\PwaBundle\\MatchCallbackHandler\\RouteMatchCallbackHandler'] ?? $container->load('getRouteMatchCallbackHandlerService'));
        }, 7), true);
    }
}
